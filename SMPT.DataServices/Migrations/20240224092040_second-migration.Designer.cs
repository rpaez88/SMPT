// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMPT.DataServices.Data;

#nullable disable

namespace SMPT.DataServices.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240224092040_second-migration")]
    partial class secondmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CareerCycle", b =>
                {
                    b.Property<Guid>("CareersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CyclesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CareersId", "CyclesId");

                    b.HasIndex("CyclesId");

                    b.ToTable("CareerCycle");
                });

            modelBuilder.Entity("CareerStudent", b =>
                {
                    b.Property<Guid>("CareersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CareersId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CareerStudent");
                });

            modelBuilder.Entity("CycleStudent", b =>
                {
                    b.Property<Guid>("CyclesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CyclesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CycleStudent");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Career", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoordinatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.ToTable("Career");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Cycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cycle");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Evidence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlArchivo")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("StateId");

                    b.HasIndex("StudentId");

                    b.ToTable("Evidence");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.EvidenceState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EvidenceState");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f017e94-8b45-4b3d-8570-d27bae91f354"),
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9557),
                            Description = "",
                            Name = "Nueva",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9561)
                        },
                        new
                        {
                            Id = new Guid("dafcb2bb-2c76-4636-849e-3e4e361f2cbd"),
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9573),
                            Description = "",
                            Name = "Aceptada",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9576)
                        },
                        new
                        {
                            Id = new Guid("578b3c6a-4e05-4151-a89c-4fbf97e4c99d"),
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9587),
                            Description = "",
                            Name = "Rechazada",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9591)
                        });
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b11bb5a-0e71-4b2d-b501-22ed7de32e3a"),
                            Alias = "admin",
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(8769),
                            Description = "Rol dedicado a la administración de la aplicación.",
                            Name = "Administrador",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(8806)
                        },
                        new
                        {
                            Id = new Guid("853f234a-ac3d-41f2-ae0a-2167bb187a28"),
                            Alias = "coordinator",
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(8831),
                            Description = "Rol con privilegios de lectura en toda la aplicación.",
                            Name = "Coordinador",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(8835)
                        },
                        new
                        {
                            Id = new Guid("0b474721-5dce-415b-b76c-21d7ee44c48a"),
                            Alias = "area-manager",
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(8849),
                            Description = "Rol con privilegios de lectura y escritura en el área correspondiente de la aplicación.",
                            Name = "Responsable de Área",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(8853)
                        },
                        new
                        {
                            Id = new Guid("271b2d02-b0c0-4b2b-a963-a416961df8d3"),
                            Alias = "student",
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(8864),
                            Description = "Rol con escritura y lectura en sus datos de evidencias.",
                            Name = "Estudiante",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(8868)
                        });
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.StudentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StudentState");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cbf87dd6-776d-4b3e-aefb-92a265e68279"),
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9214),
                            Description = "",
                            Name = "Pasante",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9219)
                        },
                        new
                        {
                            Id = new Guid("26f48afe-d0f2-440a-96ef-111fb8390a53"),
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9284),
                            Description = "",
                            Name = "Egresado",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9287)
                        },
                        new
                        {
                            Id = new Guid("daa6f5bb-ad6f-419f-9111-4a62e920ef01"),
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9298),
                            Description = "",
                            Name = "Titulado",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9302)
                        },
                        new
                        {
                            Id = new Guid("20db964b-739c-4973-b78c-18a62d712139"),
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9313),
                            Description = "",
                            Name = "Baja",
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9316)
                        });
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("116ea908-c367-46fe-af50-be26778a89b1"),
                            Code = 0L,
                            CreatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9800),
                            Email = "cuvalles@udg.mx",
                            IsActive = true,
                            Name = "Administrador",
                            Password = "AQAAAAIAAYagAAAAEKWWe3U/k3WqjRYIdoJfV6stmwBxj4PVGKCDJV6ScS3t0OnFaBx/YNtY5/i7+WGXDw==",
                            RoleId = new Guid("5b11bb5a-0e71-4b2d-b501-22ed7de32e3a"),
                            UpdatedDate = new DateTime(2024, 2, 24, 3, 20, 36, 860, DateTimeKind.Local).AddTicks(9804)
                        });
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Student", b =>
                {
                    b.HasBaseType("SMPT.Entities.DbSet.User");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("StateId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("CareerCycle", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Career", null)
                        .WithMany()
                        .HasForeignKey("CareersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.Cycle", null)
                        .WithMany()
                        .HasForeignKey("CyclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareerStudent", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Career", null)
                        .WithMany()
                        .HasForeignKey("CareersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CycleStudent", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Cycle", null)
                        .WithMany()
                        .HasForeignKey("CyclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Area", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Career", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.User", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorId");

                    b.Navigation("Coordinator");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Evidence", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Area", "Area")
                        .WithMany("Evidences")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.EvidenceState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.Student", "Student")
                        .WithMany("Evidences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("State");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.User", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Student", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.StudentState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Area", b =>
                {
                    b.Navigation("Evidences");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Student", b =>
                {
                    b.Navigation("Evidences");
                });
#pragma warning restore 612, 618
        }
    }
}
