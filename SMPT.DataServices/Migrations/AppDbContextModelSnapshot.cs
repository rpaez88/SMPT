// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMPT.DataServices.Data;

#nullable disable

namespace SMPT.DataServices.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CareerCycle", b =>
                {
                    b.Property<Guid>("CareersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CyclesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CareersId", "CyclesId");

                    b.HasIndex("CyclesId");

                    b.ToTable("CareerCycle");
                });

            modelBuilder.Entity("CareerStudent", b =>
                {
                    b.Property<Guid>("CareersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CareersId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CareerStudent");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Career", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoordinatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.ToTable("Career");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Cycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cycle");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Evidence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlArchivo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("StateId");

                    b.HasIndex("StudentId");

                    b.ToTable("Evidence");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.EvidenceState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EvidenceState");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1592cf34-75ba-4698-a83c-68f8c5b9bcef"),
                            CreatedDate = new DateTime(2024, 2, 10, 18, 33, 13, 919, DateTimeKind.Local).AddTicks(6771),
                            Description = "Rol dedicado a la administración de la aplicación.",
                            Name = "Administrador",
                            UpdatedDate = new DateTime(2024, 2, 10, 18, 33, 13, 919, DateTimeKind.Local).AddTicks(6869)
                        },
                        new
                        {
                            Id = new Guid("6956ff8a-062f-410d-9bb9-164ca945f559"),
                            CreatedDate = new DateTime(2024, 2, 10, 18, 33, 13, 919, DateTimeKind.Local).AddTicks(6923),
                            Description = "Rol con privilegios de lectura en toda la aplicación.",
                            Name = "Coordinador",
                            UpdatedDate = new DateTime(2024, 2, 10, 18, 33, 13, 919, DateTimeKind.Local).AddTicks(6925)
                        },
                        new
                        {
                            Id = new Guid("836097ef-eb02-4909-84c0-6833094c7b25"),
                            CreatedDate = new DateTime(2024, 2, 10, 18, 33, 13, 919, DateTimeKind.Local).AddTicks(6933),
                            Description = "Rol con privilegios de lectura y escritura en el área correspondiente de la aplicación.",
                            Name = "ResponsableArea",
                            UpdatedDate = new DateTime(2024, 2, 10, 18, 33, 13, 919, DateTimeKind.Local).AddTicks(6935)
                        },
                        new
                        {
                            Id = new Guid("4f01473d-e10b-4112-b7f5-04f2a8aa9b7e"),
                            CreatedDate = new DateTime(2024, 2, 10, 18, 33, 13, 919, DateTimeKind.Local).AddTicks(6942),
                            Description = "Rol con escritura y lectura en sus datos de evidencias.",
                            Name = "Alumno",
                            UpdatedDate = new DateTime(2024, 2, 10, 18, 33, 13, 919, DateTimeKind.Local).AddTicks(6944)
                        });
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.StudentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StudentState");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("5eb4b3f7-3bc9-4e30-9fd0-6953a4b50b9a"),
                            Code = 0L,
                            CreatedDate = new DateTime(2024, 2, 10, 18, 33, 13, 919, DateTimeKind.Local).AddTicks(7197),
                            Email = "cuvalles@udg.mx",
                            IsActive = true,
                            Name = "Administrador",
                            Password = "AQAAAAIAAYagAAAAEKWWe3U/k3WqjRYIdoJfV6stmwBxj4PVGKCDJV6ScS3t0OnFaBx/YNtY5/i7+WGXDw==",
                            RoleId = new Guid("1592cf34-75ba-4698-a83c-68f8c5b9bcef"),
                            UpdatedDate = new DateTime(2024, 2, 10, 18, 33, 13, 919, DateTimeKind.Local).AddTicks(7200)
                        });
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Student", b =>
                {
                    b.HasBaseType("SMPT.Entities.DbSet.User");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CycleId");

                    b.HasIndex("StateId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("CareerCycle", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Career", null)
                        .WithMany()
                        .HasForeignKey("CareersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.Cycle", null)
                        .WithMany()
                        .HasForeignKey("CyclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareerStudent", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Career", null)
                        .WithMany()
                        .HasForeignKey("CareersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Area", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Career", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.User", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorId");

                    b.Navigation("Coordinator");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Evidence", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Area", "Area")
                        .WithMany("Evidences")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.EvidenceState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.Student", "Student")
                        .WithMany("Evidences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("State");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.User", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Student", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.StudentState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cycle");

                    b.Navigation("State");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Area", b =>
                {
                    b.Navigation("Evidences");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Student", b =>
                {
                    b.Navigation("Evidences");
                });
#pragma warning restore 612, 618
        }
    }
}
