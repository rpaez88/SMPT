// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMPT.DataServices.Data;

#nullable disable

namespace SMPT.DataServices.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240225222356_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CareerCycle", b =>
                {
                    b.Property<Guid>("CareersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CyclesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CareersId", "CyclesId");

                    b.HasIndex("CyclesId");

                    b.ToTable("CareerCycle");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Career", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoordinatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.ToTable("Career");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Cycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cycle");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Evidence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlArchivo")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("StateId");

                    b.HasIndex("StudentId");

                    b.ToTable("Evidence");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.EvidenceState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EvidenceState");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9dced51b-4708-48ed-9131-94b0f76f0ec5"),
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8712),
                            Description = "",
                            Name = "Nueva",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8714)
                        },
                        new
                        {
                            Id = new Guid("3506207e-220f-4bae-a912-f06ba8c6d9f6"),
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8721),
                            Description = "",
                            Name = "Aceptada",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8723)
                        },
                        new
                        {
                            Id = new Guid("f7565740-e47a-4027-9d09-60cf062ee605"),
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8730),
                            Description = "",
                            Name = "Rechazada",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8732)
                        });
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60d49817-4745-402e-902a-d7e279026946"),
                            Alias = "admin",
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8069),
                            Description = "Rol dedicado a la administración de la aplicación.",
                            Name = "Administrador",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8098)
                        },
                        new
                        {
                            Id = new Guid("01f7ce23-aade-489c-8278-6a4ee5b3c65a"),
                            Alias = "coordinator",
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8121),
                            Description = "Rol con privilegios de lectura en toda la aplicación.",
                            Name = "Coordinador",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8123)
                        },
                        new
                        {
                            Id = new Guid("d507ef5a-0b98-4c6f-8960-78fd4b03d2bf"),
                            Alias = "area-manager",
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8130),
                            Description = "Rol con privilegios de lectura y escritura en el área correspondiente de la aplicación.",
                            Name = "Responsable de Área",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8132)
                        },
                        new
                        {
                            Id = new Guid("405fff9b-45c5-4045-afd4-97323675a4ed"),
                            Alias = "student",
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8139),
                            Description = "Rol con escritura y lectura en sus datos de evidencias.",
                            Name = "Estudiante",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8142)
                        });
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CareerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CycleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CareerId");

                    b.HasIndex("CycleId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.StudentState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StudentState");

                    b.HasData(
                        new
                        {
                            Id = new Guid("506b4867-ffe2-483d-9b77-70e64136bc7f"),
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8503),
                            Description = "",
                            Name = "Pasante",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8506)
                        },
                        new
                        {
                            Id = new Guid("3552e990-906d-4b57-b9a4-7027d82d4c38"),
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8515),
                            Description = "",
                            Name = "Egresado",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8517)
                        },
                        new
                        {
                            Id = new Guid("3a02215c-62cb-4ab8-bcf6-beb5de690330"),
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8525),
                            Description = "",
                            Name = "Titulado",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8526)
                        },
                        new
                        {
                            Id = new Guid("f0d4444a-87b5-46cd-8cb5-ae331e3e028b"),
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8533),
                            Description = "",
                            Name = "Baja",
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8535)
                        });
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("937ae2ed-fbd7-4625-bdcb-b754f108cd2b"),
                            Code = 0L,
                            CreatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8864),
                            Email = "cuvalles@udg.mx",
                            IsActive = true,
                            Name = "Administrador",
                            Password = "AQAAAAIAAYagAAAAEKWWe3U/k3WqjRYIdoJfV6stmwBxj4PVGKCDJV6ScS3t0OnFaBx/YNtY5/i7+WGXDw==",
                            RoleId = new Guid("60d49817-4745-402e-902a-d7e279026946"),
                            UpdatedDate = new DateTime(2024, 2, 25, 16, 23, 53, 585, DateTimeKind.Local).AddTicks(8867)
                        });
                });

            modelBuilder.Entity("CareerCycle", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Career", null)
                        .WithMany()
                        .HasForeignKey("CareersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.Cycle", null)
                        .WithMany()
                        .HasForeignKey("CyclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Area", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Career", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.User", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorId");

                    b.Navigation("Coordinator");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Evidence", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Area", "Area")
                        .WithMany("Evidences")
                        .HasForeignKey("AreaId")
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.EvidenceState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMPT.Entities.DbSet.Student", "Student")
                        .WithMany("Evidences")
                        .HasForeignKey("StudentId")
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("State");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Student", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Career", "Career")
                        .WithMany("Students")
                        .HasForeignKey("CareerId");

                    b.HasOne("SMPT.Entities.DbSet.Cycle", "Cycle")
                        .WithMany("Students")
                        .HasForeignKey("CycleId");

                    b.HasOne("SMPT.Entities.DbSet.StudentState", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("SMPT.Entities.DbSet.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Career");

                    b.Navigation("Cycle");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.User", b =>
                {
                    b.HasOne("SMPT.Entities.DbSet.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Area", b =>
                {
                    b.Navigation("Evidences");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Career", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Cycle", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SMPT.Entities.DbSet.Student", b =>
                {
                    b.Navigation("Evidences");
                });
#pragma warning restore 612, 618
        }
    }
}
