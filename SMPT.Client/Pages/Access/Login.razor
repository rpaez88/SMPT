@page "/login"
@layout BlankLayout

@using SMPT.Shared;
@using SMPT.Client.Services;

@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject ILoginService loginService;
@inject NavigationManager Navigation;

<div class="d-flex flex-row">
    <div class="d-none d-md-flex flex-column justify-content-center align-center bg-login vh-100 w-50">
        <MudText Typo="Typo.h3" Align="Align.Center" Style="color: #eee">SMPT CUValles</MudText>
        <MudText Typo="Typo.h6" Align="Align.Center" Style="color: #c9c9c9" Class="w-75">Sistema para la mejora de procesos de titulacón</MudText>
        <MudImage ObjectFit="ObjectFit.Cover" Width="480" Src="image/login/desktop-mobile.svg" Alt="Logo" Class="mt-4" />
    </div>
    <div class="d-flex flex-column justify-content-center align-center vh-100 w-login">
        <h3><MudIcon Icon="@Icons.Material.Filled.School" Size="Size.Large" Class="mr-2"></MudIcon>SMPT CUValles</h3>
        @*<MudImage ObjectFit="ObjectFit.Cover" Height="55" Width="370" Src="image/login/logo.png" Alt="Logo" Elevation="25" Class="rounded-lg" />*@
        
        <form action="" class="d-flex flex-column align-center w-50">
            <div class="w-100">
                <MudTextField @bind-Value="Code" 
                    Label="Código"
                    Variant="Variant.Filled"
                    Disabled="@_processing"
                    InputType="InputType.Text"
                    Required="true"
                    RequiredError="El código es requerido!" />
            </div>
            <div class="w-100 mt-2">
                <MudTextField @bind-Value="Password"
                    Label="Contraseña"
                    Variant="Variant.Filled"
                    Disabled="@_processing"
                    InputType="@PasswordInput"
                    Adornment="Adornment.End"
                    AdornmentIcon="@PasswordInputIcon"
                              OnAdornmentClick="showPassword"
                    AdornmentAriaLabel="Show Password"
                    Required="true" RequiredError="La contraseña es requerida!" />
            </div>
            <div class="w-100 mt-4">
                <MudButton Disabled="@_processing" OnClick="login"
                           Color="Color.Info"
                           Size="Size.Large"
                           Variant="Variant.Filled"
                           FullWidth="true">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Typo="Typo.button" Class="ms-2">Iniciando sesión</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.button">Iniciar sesión</MudText>
                    }
                </MudButton>
            </div>
            @if (isError)
            {
                <div class="w-100 mt-4 text-center">
                    <MudText Typo="Typo.body2" Color="Color.Error">@Message</MudText>
                </div>
            }
        </form>
    </div>
</div>

@code {
    public string Code { get; set; } = "";
    public string Password { get; set; } = "";
    public string Message { get; set; } = "";

    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool _processing = false;
    private bool isError = false;

    void showPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task login()
    {
        if (!string.IsNullOrWhiteSpace(Code) && !string.IsNullOrWhiteSpace(Password))
        {
            Message = "";
            _processing = true;
            isError = false;
            try
            {
                var token = await loginService.Login(int.Parse(Code), Password);
                if (token != null)
                {
                    await localStorage.SetItemAsStringAsync("smpt-token", token);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    Message = "Credenciales incorrectas";
                    isError = true;
                }
                _processing = false;
            }
            catch (Exception err)
            {
                Message = err.Message;
                isError = true;
                _processing = false;
            }
        }

    }
}