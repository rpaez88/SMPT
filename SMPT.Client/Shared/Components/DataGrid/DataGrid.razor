@namespace SMPT.Client.Shared.Components

@using System.Net.Http.Json
@using SMPT.Client.Models
@using CurrieTechnologies.Razor.SweetAlert2

@inject NavigationManager Navigation
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject SweetAlertService Swal

<MudDataGrid Items="@Elements" Dense="@_dense" Striped="@_striped" Bordered="@_bordered" SelectedItems="@_selectedItems" T="Student" MultiSelection="true"
             RowStyleFunc="@_rowStyleFunc" Loading="@_loading" @ref="@grid" QuickFilter="@_quickFilter" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Estudiantes</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Student" />
        <PropertyColumn Property="x => x != null ? x.Code : 0" Title="Codigo"/>
        <PropertyColumn Property="x => x != null ? x.Name : string.Empty" Title="Nombre" />
        <PropertyColumn Property="x => x != null ? x.State : string.Empty" Title="Estado" CellStyleFunc="@_cellStyleFunc" />
        <PropertyColumn Property="x => x != null ? x.Course : string.Empty" Title="Curso" />
        <TemplateColumn Title="Activo" Sortable="false">
            <CellTemplate>
                <MudIcon Icon="@(context?.Item?.Active==true ? @Icons.Material.Filled.CheckCircleOutline : @Icons.Material.Filled.HighlightOff)"
                         Color="@(context?.Item?.Active==true ? Color.Success : Color.Error)" />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.EditNote" Class="mr-1"
                    OnClick="async() => await Evidencias(context?.Item?.Code)"
                    Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">
                </MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.DisabledVisible"
                               OnClick="((e) => Test(context?.Item))"
                               Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error">
                </MudIconButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Student" PageSizeOptions="@_pageSize" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap my-4">
    <MudPaper Elevation="2" Class="pa-4">
        <MudSwitch @bind-Checked="@_dense" ThumbIcon="@(_dense == true ? @Icons.Material.Filled.DensitySmall : @Icons.Material.Filled.DensityLarge)" Color="Color.Info">
            Compacto
        </MudSwitch>
        <MudSwitch @bind-Checked="@_striped" ThumbIcon="@(_striped == true ? @Icons.Material.Filled.CalendarViewDay : @Icons.Material.Filled.Dehaze)" Color="Color.Primary">
            A rayas
        </MudSwitch>
        <MudSwitch @bind-Checked="@_bordered" ThumbIcon="@(_bordered == true ? @Icons.Material.Filled.BorderAll : @Icons.Material.Filled.BorderClear)" Color="Color.Dark">
            Bordeado
        </MudSwitch>
    </MudPaper>
</div>


@code {
    private IEnumerable<Student> Elements = new List<Student>();
    private bool _dense = true;
    private bool _striped = true;
    private bool _bordered = true;
    private bool _loading = true;
    private int[] _pageSize = { 5, 10, 20 };
    private string _searchString = "";
    private HashSet<Student> _selectedItems = new HashSet<Student>();
    private List<string> _events = new();
    private MudDataGrid<Student>? grid;

    // style the rows where the Student.Position == 0 to have italic text.
    private Func<Student, int, string> _rowStyleFunc => (x, i) =>
    {
        if (x.State == "Titulado")
            return "font-style:italic";

        return "";
    };
    // style the cells according to the element's physical classification and the molar mass.
    private Func<Student, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (x.State == "Titulado")
            style += "background-color:#8CED8C";

        else if (x.State == "Egresado")
            style += "background-color:#E5BDE5";

        else if (x.State == "Pasante")
            style += "background-color:#EACE5D";

        else if (x.State == "Baja")
            style += "background-color:#F1F165";

        if (x.Course == "2022 A")
            style += ";font-weight:bold";

        return style;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<Student, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrEmpty(x.State) && x.State.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Name) && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Course) && x.Course.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Code}".Contains(_searchString))
            return true;

        return false;
    };
    // events
    void RowClicked(DataGridRowClickEventArgs<Student> args)
    {
        _selectedItems.Add(args.Item);
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<Student> items)
    {
        _selectedItems = items;
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    protected override async Task OnInitializedAsync()
    {
        //Elements = await httpClient.GetFromJsonAsync<List<Student>>("webapi/periodictable");
        List<Student> students = new List<Student>();
        _loading = true;
        await Task.Delay(2000);

        students.Add(new Student(1, "Efren", "Placensia", "Titulado", "2016 B", true));
        students.Add(new Student(2, "Josue", "Isaias", "Egresado", "2018 A", true));
        students.Add(new Student(3, "Tomas", "Lugo", "Pasante", "2021 B", true));
        students.Add(new Student(6, "Nerina","Peña", "Pasante", "2022 A", true));
        students.Add(new Student(5, "Raidel","Paez", "Egresado", "2018 A", false));
        students.Add(new Student(4, "Rodrigo", "Rendesiz", "Egresado", "2017 B", false));
        Elements = students;

        _loading = false;
    }

    public async Task Evidencias(int? Code)
    {
        if (Code != null)
            Navigation.NavigateTo("estudiante/" + Code);
    }

    async Task Desactivar(Student? student)
    {
        if (student != null)
        {
            var parameters = new DialogParameters { ["student"] = student };

            var dialog = await DialogService.ShowAsync<Confirm>("Desactivar estudiante", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
                //List<Student> students = Elements.ToList();
                //int.TryParse(result.Data.ToString(), out int code);
                //students.RemoveAll(item => item.Code == code);
                //Elements = students;
                student.Active = false;
            }
        }
    }

    async Task Test(Student? student)
    {
        if (student != null)
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Desactivar Estudiante",
                    Text = "Deseas desactivar el estudiante " + student.Name,
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true
                });

            if (result.IsConfirmed)
            {
                student.Active = false;
            }
        }
    }
    //@Icons.Material.Filled.DoDisturb
    //@Icons.Material.Filled.HighlightOff
}
